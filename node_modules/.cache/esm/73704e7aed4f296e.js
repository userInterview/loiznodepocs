"use strict";;let Observable,fetch;_ed4‍.w("rxjs",[["default",["Observable"],function(v){Observable=v}]]);_ed4‍.w("node-fetch",[["default",["fetch"],function(v){fetch=v}]]);
_ed4‍.t("module").exports=_ed4‍.t("require")("./esm.js");

//import  Observable  from 'rxjs';
//const { rxjs } = Observable;
//const { Observable, from } = rxjs;


const { rxjs } = Observable;



// const fetch = require("node-fetch");

// const rxjs = require("rxjs");

function fetchObsAvecSequencesV2() {  //Lazy : exécuter à la demande

       //pas exécuté si pas de souscription
       const objObservable = new rxjs.Observable( observer => {
                     //console.log('<fetchObs()> - 1. Dans le corps de l\'observable');
                     fetch("http://localhost:89/LoizDatasBounchons/restDatas/CVE-2021-3114.json",{method: "GET"})
                     .then (
                      function (res,rej) {	
                                                    return(
                                                                      new Promise (
                                                                                            function(resolve , reject)	{
                                                                                                   setTimeout( function() {
                                                                                                   _ed4‍.g.console.log("<fetchObsAvecSequencesV2> - récupération 1",res);	
                                                                                                   observer.next(res); resolve(res) ; return res; 
                                                                                                   }  , 5000 ) ;
                                                                                                                                            }
                                                                                           ) 
                                                                );
                     })																	
                     .then ( async function(ressuiv) {
                     
                                      let valeur  = await (new Promise(function(resolve, reject) {
                                           window.setTimeout(function() {
                                                        let myval = ressuiv.json() ;
                                                        resolve(myval) ; 	
                                                        _ed4‍.g.console.log("<fetchObsAvecSequencesV2> - récupération 2",myval);																						
                                           },5000) 
                                      }))
                                      .then(function(resolved, reject) {
                                                   _ed4‍.g.console.log("resolved",resolved) ;
                                                   return resolved ;
                                    })  ;       
                                    valeur = valeur.result ;
                                    _ed4‍.g.console.log("valeur",valeur) ; 
                                    observer.next(valeur);
                                    return valeur ; 
                     })
                     .then(async function (datajsonified) {
                                   _ed4‍.g.console.log("datajsonified - 844",datajsonified) ;
                                   var retour = await ( new Promise ( function (resolve, rej) { setTimeout( function() {	
                                   //var res = resolve ;
                                   var res = datajsonified ;
                                   delete res["CVE_Items"];																																																													    													    														    														    
                                   var objJSonResult = [res] ;	
                                   var objLoizHeure = { "loizheure - 3": fullTimeSync() }; 															    																			
                                   objJSonResult[objJSonResult.length] = objLoizHeure ;
                                   //objJSonResult.push(objLoizHeure); 
                                   _ed4‍.g.console.log("<fetchObsAvecSequencesV2> - récupération 3",objJSonResult);								  									  																	
                                   observer.next(objJSonResult) ;
                                   resolve(objJSonResult) ;
                                   } , 5000 ) } ))
                                   .then(function(resolved, reject) {
                                                   _ed4‍.g.console.log("resolved 860",resolved) ;
                                                   return resolved ;
                                    })  ; 
                                   
                                   _ed4‍.g.console.log("retour - 859", retour ) ; 
                                   
                                   return retour ;
                     }
                     )
                     .then (
                      function (resfour) {	
                      _ed4‍.g.console.log("resfour 864", resfour) ;
                      setTimeout( function() {
                                   
                                   _ed4‍.g.console.log("resfour 867", resfour) ;
                                   var objLoizHeure = { "loizheure - 4": fullTimeSync() }; 
                                   //var res = [resfour] ;
                                   resfour[resfour.length] = objLoizHeure ;
                                   //res.push(objLoizHeure); 
                                   observer.next(resfour) ;
                                   _ed4‍.g.console.log("<fetchObsAvecSequencesV2> - récupération 4",resfour);
                                   observer.complete() ;
                                   }  , 5000 ) ;
                      
                      
                                                        })	;								
       }) ;  
       
       //console.log('<fetchObs()> - 2. Pre Subscribe statement'); 
       
       objObservable.subscribe( res => {
       _ed4‍.g.console.log("<fetchObs()> - res vaut :",res) ;
       res ;
       /*console.log('<fetchObs()> 3 -  dans le corps de la souscription - valeur à');
       console.log('\n\n');*/
       });
       } ;

fetchObsAvecSequencesV2();